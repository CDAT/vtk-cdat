version: 2.1

parameters:
   pkg_name:
      type: string
      default: "vtk-cdat"
   repo_name:
      type: string
      default: "vtk-cdat"
   last_stable:
      type: string
      default: "8.2.0.8.2"
   user:
      type: string
      default: "cdat"
   label:
      type: string
      default: "v8.2.1"

aliases:
  - &setup_env
    name: setup_env
    command: |
       export OS_TYPE=`uname`
       if [[ $OS_TYPE == "Darwin" ]]; then
          export PROJECT_DIR=/Users/distiller/project/workdir/macos
       else
          export PROJECT_DIR=/home/circleci/project/workdir/linux
       fi
       echo "export WORKDIR=$PROJECT_DIR/${PY_VER}-${MESA_OR_NO_MESA}" >> $BASH_ENV
       cat $BASH_ENV
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &setup_miniconda
    name: setup_miniconda
    command: |
       source $BASH_ENV
       mkdir -p $WORKDIR
       git clone https://github.com/CDAT/cdat.git $WORKDIR/cdat
       # install_miniconda.py installs miniconda3 under $WORKDIR/miniconda
       python $WORKDIR/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'

  - &conda_rerender
    name: conda_rerender
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       make conda-rerender conda=$WORKDIR/miniconda/bin/conda workdir=$WORKDIR last_stable=$LAST_STABLE branch=$CIRCLE_BRANCH

  - &conda_build
    name: conda_build
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       os=`uname`
       artifacts_dir="artifacts/artifacts.${os}.py_${PY_VER}.${MESA_OR_NO_MESA}"
       BUILD_VARIANT_VER="${PY_VER}.____cpythonvtk_with_os${MESA_OR_NO_MESA}"
       make conda-build conda=$WORKDIR/miniconda/bin/conda workdir=$WORKDIR artifact_dir=$PWD/$artifacts_dir build_version=$BUILD_VARIANT_VER

  - &conda_upload
    name: conda_upload
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       UPLOAD_OPTIONS="conda_upload_token=$CONDA_UPLOAD_TOKEN user=$USER label=$LABEL"
       make conda-upload $UPLOAD_OPTIONS conda=$WORKDIR/miniconda/bin/conda artifact_dir="$PWD/artifacts/*/"

  - &install_ninja
    name: install_ninja
    command: |
       git clone git://github.com/ninja-build/ninja.git $WORKDIR/ninja
       cd $WORKDIR/ninja
       git checkout release
       ./configure.py --bootstrap

executors:
   linux:
      machine:
         image: circleci/classic:latest
   macos:
      macos:
         xcode: "11.4.0"

jobs:
   build:
      parameters:
         os:
            type: executor
         py_ver: 
            type: string
         mesa_or_no_mesa:
            type: string
      executor: << parameters.os >>
      environment:
         PKG_NAME: << pipeline.parameters.pkg_name >>
         REPO_NAME: << pipeline.parameters.repo_name >>
         LAST_STABLE: << pipeline.parameters.last_stable >>
         PY_VER: << parameters.py_ver >>
         MESA_OR_NO_MESA: << parameters.mesa_or_no_mesa >>
         VERSION: << pipeline.parameters.last_stable >>
         USER: << pipeline.parameters.user >>
         LABEL: << pipeline.parameters.label >>
      steps:
         - checkout
         - run: *setup_env
         - run: *setup_miniconda
         - run: *install_ninja
         - run: *conda_rerender
         - run: *conda_build
         - run: *conda_upload
#         - persist_to_workspace:
#              root: .
#              paths:
#                 - artifacts
#                 - workdir

   upload:
      machine:
         image: circleci/classic:latest
      environment:
         PKG_NAME: << pipeline.parameters.pkg_name >>
         VERSION: << pipeline.parameters.last_stable >>
         USER: << pipeline.parameters.user >>
         LABEL: << pipeline.parameters.label >>
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *conda_upload

workflows:
   vtk-cdat:
      jobs:
         - build:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    py_ver: [ "3.6", "3.7", "3.8" ]
                    mesa_or_no_mesa: [ "mesaFalse", "mesaTrue" ]
              name: build-<< matrix.os >>-<< matrix.py_ver >>-<< matrix.mesa_or_no_mesa >>


